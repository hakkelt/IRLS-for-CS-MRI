using LinearAlgebra, FFTW, FunctionOperators, OffsetArrays, IterativeSolvers, ToeplitzMatrices, Printf, ProgressMeter
include("helper_functions.jl")
rank_rtol = 1e-4

function update_H!(H, œÉ, œµ·µè)
    for ind in CartesianIndices(H)
        i, j = ind[1], ind[2]
        H[ind] = 1 / (max(œÉ[i], œµ·µè) * max(œÉ[j], œµ·µè))
    end
end

function update_dH!(dH, œÉ, œµ·µè, rÃÉ)
    for j in eachindex(dH)
        dH[j] = 1 / (max(œÉ[rÃÉ+1], œµ·µè) * max(œÉ[j], œµ·µè))
    end
end

    
split(Œ≥, rÃÉ, d‚ÇÅ, d‚ÇÇ) = @views begin
    Œ≥‚ÇÅ = reshape(Œ≥[1:rÃÉ^2], rÃÉ, rÃÉ)
    Œ≥‚ÇÇ = reshape(Œ≥[rÃÉ^2+1:rÃÉ*(rÃÉ+d‚ÇÇ)], rÃÉ, d‚ÇÇ)
    Œ≥‚ÇÉ = reshape(Œ≥[rÃÉ*(rÃÉ+d‚ÇÇ)+1:rÃÉ*(rÃÉ+d‚ÇÅ+d‚ÇÇ)], d‚ÇÅ, rÃÉ)
    Œ≥‚ÇÅ, Œ≥‚ÇÇ, Œ≥‚ÇÉ
end

function update_ùíü‚Åª¬π!(ùíü‚Åª¬π, H, dH, rÃÉ, d‚ÇÅ, d‚ÇÇ)
    ùíü‚Åª¬π‚ÇÅ, ùíü‚Åª¬π‚ÇÇ, ùíü‚Åª¬π‚ÇÉ = split(ùíü‚Åª¬π, rÃÉ, d‚ÇÅ, d‚ÇÇ)
    ùíü‚Åª¬π‚ÇÅ .= H
    for i in 1:d‚ÇÇ
        ùíü‚Åª¬π‚ÇÇ[:,i] .= dH
    end
    for i in 1:d‚ÇÅ
        ùíü‚Åª¬π‚ÇÉ[i,:] .= dH
    end
    ùíü‚Åª¬π .= 1 ./ ùíü‚Åª¬π
end

function get_P_operator(U·µè, V·µè, Vt·µè, temp·µà¬πÀ£·µà¬≤, rÃÉ, d‚ÇÅ, d‚ÇÇ, dType)
    
    temp·µà¬πÀ£ ≥, temp ≥À£·µà¬≤ = Array{dType}(undef, d‚ÇÅ, rÃÉ), Array{dType}(undef, rÃÉ, d‚ÇÇ)
    
    I_VV, I_UU = Array{dType}(undef, d‚ÇÇ, d‚ÇÇ), Array{dType}(undef, d‚ÇÅ, d‚ÇÅ)
    I·µà¬πÀ£·µà¬π, I·µà¬≤À£·µà¬≤ = Diagonal(ones(d‚ÇÅ)), Diagonal(ones(d‚ÇÇ))
    
    P·µè = FunctionOperator{dType}(name="P·µè", inDims = (rÃÉ*(rÃÉ+d‚ÇÅ+d‚ÇÇ),), outDims = (d‚ÇÅ, d‚ÇÇ),
        forw = (b,Œ≥) -> begin
                Œ≥‚ÇÅ, Œ≥‚ÇÇ, Œ≥‚ÇÉ = split(Œ≥, rÃÉ, d‚ÇÅ, d‚ÇÇ)
                # According to (2.169), the equation would be:
                # U·µè * Œ≥‚ÇÅ * V·µè' + U·µè * Œ≥‚ÇÇ' * (I - V·µè*V·µè') + (I - U·µè*U·µè') * Œ≥‚ÇÉ' * V·µè'
                # But as the columns of Œ≥‚ÇÇ are orthogonal to the ones in U·µè,
                # the rows of Œ≥‚ÇÉ are orthogonal to the columns of V·µè,
                # the expression can be simplified:
                # (U·µè * Œ≥‚ÇÅ + Œ≥‚ÇÉ) * V·µè' + U·µè * Œ≥‚ÇÇ
                # And this is implemented avoiding array re-allocations:
                mul!(temp·µà¬πÀ£ ≥, U·µè, Œ≥‚ÇÅ)
                temp·µà¬πÀ£ ≥ .+= Œ≥‚ÇÉ
                mul!(b, temp·µà¬πÀ£ ≥, Vt·µè)
                mul!(temp·µà¬πÀ£·µà¬≤, U·µè, Œ≥‚ÇÇ)
                b .+= temp·µà¬πÀ£·µà¬≤
            end,
        backw = (Œ≥,Œ¶·µÉy) -> begin
                Œ≥‚ÇÅ, Œ≥‚ÇÇ, Œ≥‚ÇÉ = split(Œ≥, rÃÉ, d‚ÇÅ, d‚ÇÇ)
                # Things to do:
                # Œ≥‚ÇÅ .= U·µè' * Œ¶·µÉy * V·µè
                # Œ≥‚ÇÇ .= U·µè' * Œ¶·µÉy * (I - V·µè*V·µè')
                # Œ≥‚ÇÉ .= (I - U·µè*U·µè') * Œ¶·µÉy * V·µè
                # Efficient implementation:
                I_VV .= I·µà¬≤À£·µà¬≤ .- mul!(I_VV, V·µè, Vt·µè) # same as I - V·µè*Vt·µè
                I_UU .= I·µà¬πÀ£·µà¬π .- mul!(I_UU, U·µè, U·µè') # same as I - U·µè*U·µè'
                mul!(temp·µà¬πÀ£ ≥, Œ¶·µÉy, V·µè)
                mul!(Œ≥‚ÇÅ, U·µè', temp·µà¬πÀ£ ≥)
                mul!(Œ≥‚ÇÉ, I_UU, temp·µà¬πÀ£ ≥)
                mul!(temp ≥À£·µà¬≤, U·µè', Œ¶·µÉy)
                mul!(Œ≥‚ÇÇ, temp ≥À£·µà¬≤, I_VV)
                Œ≥
                #vcat(vec(Œ≥‚ÇÅ), vec(Œ≥‚ÇÇ), vec(Œ≥‚ÇÉ))
            end)
    
    P·µè
end

function get_CG_operator(P·µÉŒ¶·µÉŒ¶P, ùíü_weighting, temp ≥‚ÅΩ ≥‚Å∫·µà¬π‚Å∫·µà¬≤‚Åæ, rÃÉ, d‚ÇÅ, d‚ÇÇ, dType)
    FunctionOperator{dType}(name = "CG_op", inDims = (rÃÉ*(rÃÉ+d‚ÇÅ+d‚ÇÇ),), outDims = (rÃÉ*(rÃÉ+d‚ÇÅ+d‚ÇÇ),),
        forw = (b,Œ≥) ->  begin
            # An efficient implementation for:
            # b .= (œµ·µè^2 * I / (ùíü‚Åª¬π - œµ·µè^2 * I)) * Œ≥ + P·µè' * Œ¶' * Œ¶ * P·µè * Œ≥
            mul!(temp ≥‚ÅΩ ≥‚Å∫·µà¬π‚Å∫·µà¬≤‚Åæ, P·µÉŒ¶·µÉŒ¶P, Œ≥)
            mul!(b, Diagonal(ùíü_weighting), Œ≥)
            b .+= temp ≥‚ÅΩ ≥‚Å∫·µà¬π‚Å∫·µà¬≤‚Åæ
        end)
end

function HM_IRLS(
        X·¥≥·µÄ::AbstractArray,                     # ground truth for MSE evaluation
        y::AbstractArray,                       # under-sampled data
        Œ¶::FunctionOperator;                    # sampling operator
        img_size::NTuple = size(X·¥≥·µÄ),           # size of output matrix
        rÃÉ::Int = 0,                             # rank estimate of solution
        maxIter::Union{Int, Nothing} = nothing, # number of CG iteration steps
        N::Int = 10,                            # number of iterations
        verbose::Bool = false)                  # print rank and loss value in each iteration

    # Initialize variables
    @assert 3 ‚â§ length(img_size) ‚â§ 4
    if length(img_size) == 3
        nx,ny,nt = img_size
        nc = size(y)[end]
    else
        nx,ny,nt,nc = img_size
    end
    dType = eltype(y)
    d‚ÇÅ, d‚ÇÇ = nx*nx, nt
    y = reshape(y, :, nt, nc)
    Œ¶ = reshape(Œ¶, inDims = (d‚ÇÅ, d‚ÇÇ), outDims = size(y))
    X·¥≥·µÄ = reshape(X·¥≥·µÄ, d‚ÇÅ, d‚ÇÇ)
    rÃÉ == 0 && (rÃÉ = rank(X·¥≥·µÄ))
    maxIter = maxIter isa Nothing ? rÃÉ*(rÃÉ+d‚ÇÅ+d‚ÇÇ) : maxIter
    œµ·µè = Inf
    X·µè = Œ¶' * y
    
    # Preallocate arrays
    F = svd(X·µè)
    U·µè, œÉ, V·µè, Vt·µè = F.U[:, 1:rÃÉ], F.S, F.V[:, 1:rÃÉ], F.Vt[1:rÃÉ, :]
    H·µè·µ§·µ• = Array{dType}(undef, rÃÉ, rÃÉ)
    dH·µè = Array{dType}(undef, rÃÉ)
    ùíü‚Åª¬π, ùíü_weighting, b, Œ≥·µè, temp ≥‚ÅΩ ≥‚Å∫·µà¬π‚Å∫·µà¬≤‚Åæ = [Vector{dType}(undef, rÃÉ*(rÃÉ+d‚ÇÅ+d‚ÇÇ)) for _ in 1:5]
    temp·µà¬πÀ£·µà¬≤ = Array{dType}(undef, d‚ÇÅ, d‚ÇÇ)
    r·µè, Œ≥·µè_tilde = similar(y), similar(Œ≥·µè)
    statevars = IterativeSolvers.CGStateVariables(similar(Œ≥·µè), similar(Œ≥·µè), similar(Œ≥·µè))
    
    # Create operators
    P·µè= get_P_operator(U·µè, V·µè, Vt·µè, temp·µà¬πÀ£·µà¬≤, rÃÉ, d‚ÇÅ, d‚ÇÇ, dType)
    P·µÉŒ¶·µÉŒ¶P = P·µè' * Œ¶' * Œ¶ * P·µè
    Œ¶P, P·µÉŒ¶·µÉ = Œ¶ * P·µè, P·µè' * Œ¶'
    CG_op = get_CG_operator(P·µÉŒ¶·µÉŒ¶P, ùíü_weighting, temp ≥‚ÅΩ ≥‚Å∫·µà¬π‚Å∫·µà¬≤‚Åæ, rÃÉ, d‚ÇÅ, d‚ÇÇ, dType)
    
    cost_vec = OffsetVector{real(dType)}(undef, 0:N)
    rank_vec = OffsetVector{Int}(undef, 0:N)
    time_vec = OffsetVector{Float64}(undef, 0:N)
    fill!(cost_vec, -1), fill!(rank_vec, -1), fill!(time_vec, -1)
    time_vec[0] = 0

    cost_vec[0] = norm(temp·µà¬πÀ£·µà¬≤ .= X·¥≥·µÄ .-  X·µè)
    rank_vec[0] = sum(Int, œÉ .> rank_rtol)
    verbose && iterationPrint("k" => 0, "rank(X·µè)" => rank_vec[0],
            "‚ÄñX·¥≥·µÄ - X·µè‚Äñ‚ÇÇ" => cost_vec[0], "œÉ‚ÇÅ" => œÉ[1], "œµ·µè" => œµ·µè)
    
    interval = verbose ? Inf : 1
    @showprogress interval "IRLS " for k in 1:N
        
        time_vec[k] = time_vec[k-1] + @elapsed begin
            
            svd!(temp·µà¬πÀ£·µà¬≤ .= X·µè, F)
            @views begin U·µè .= F.U[:, 1:rÃÉ]; V·µè .=  F.V[:, 1:rÃÉ]; Vt·µè .= F.Vt[1:rÃÉ, :]; end

            œµ·µè = min(œµ·µè, œÉ[rÃÉ+1])

            update_H!(H·µè·µ§·µ•, œÉ, œµ·µè)
            update_dH!(dH·µè, œÉ, œµ·µè, rÃÉ)
            update_ùíü‚Åª¬π!(ùíü‚Åª¬π, H·µè·µ§·µ•, dH·µè, rÃÉ, d‚ÇÅ, d‚ÇÇ)

            # An efficient implementation of ùíü_weighting = œµ·µè^2 * I / (ùíü‚Åª¬π - œµ·µè^2 * I):
            ùíü_weighting .= œµ·µè^2 ./ (ùíü‚Åª¬π .- œµ·µè^2)

            mul!(b, P·µÉŒ¶·µÉ, y) # right hand side for CG
            mul!(Œ≥·µè, P·µè', X·µè) # initial value for CG

            cg!(Œ≥·µè, CG_op, b, maxiter = maxIter, statevars = statevars) # 2.167

            # An efficient implementation of r·µè = y - Œ¶ * P·µè * Œ≥·µè:
            r·µè .= y .- mul!(r·µè, Œ¶P,  Œ≥·µè)

            # An efficient implementation of Œ≥·µè_tilde = Diagonal(ùíü‚Åª¬π ./ (ùíü‚Åª¬π .- œµ·µè^2)) * Œ≥·µè - P·µè' * Œ¶' * r·µè
            ùíü_weighting .= ùíü‚Åª¬π ./ (ùíü‚Åª¬π .- œµ·µè^2) # same as Diagonal(ùíü‚Åª¬π ./ (ùíü‚Åª¬π .- œµ·µè^2))
            mul!(temp ≥‚ÅΩ ≥‚Å∫·µà¬π‚Å∫·µà¬≤‚Åæ, P·µÉŒ¶·µÉ, r·µè)
            mul!(Œ≥·µè_tilde, Diagonal(ùíü_weighting), Œ≥·µè)
            Œ≥·µè_tilde .-= temp ≥‚ÅΩ ≥‚Å∫·µà¬π‚Å∫·µà¬≤‚Åæ

            # An efficient implementation of X·µè = Œ¶' * r·µè + P·µè * Œ≥·µè_tilde
            mul!(X·µè, P·µè, Œ≥·µè_tilde)
            X·µè .+= mul!(temp·µà¬πÀ£·µà¬≤, Œ¶', r·µè)   # 2.168
            
        end

        cost_vec[k] = norm(temp·µà¬πÀ£·µà¬≤ .= X·¥≥·µÄ .-  X·µè)
        rank_vec[k] = sum(Int, œÉ .> rank_rtol)
        verbose && iterationPrint("k" => k, "rank(X·µè)" => rank_vec[k],
                "‚ÄñX·¥≥·µÄ - X·µè‚Äñ‚ÇÇ" => cost_vec[k], "œÉ‚ÇÅ" => œÉ[1], "œµ·µè" => œµ·µè)
        if cost_vec[k] > cost_vec[0]
            break
        end
        
    end
    
    reshape(X·µè, nx, ny ,nt), cost_vec, rank_vec, time_vec
end

function AL_CG(
        X·¥≥·µÄ::AbstractArray,                   # ground truth for MSE evaluation
        d::AbstractArray,                     # under-sampled k-t data
        E::FunctionOperator,                  # acquisition operator
        T::FunctionOperator;                  # temporal Fourier tranform
        img_shape::NTuple = size(d),          # size of output image
        scale_L::Real = 1,                    # scaling factor for L
        scale_S::Real = 1,                    # scaling factor for S
        Œª_L::Real = 0.01,                     # singular value threshold
        Œª_S::Real = 0.05,                     # sparsity threshold
        Œ¥‚ÇÅ::Real = 1//10,                     # first AL penalty parameter
        Œ¥‚ÇÇ::Real = 1//100,                    # second AL penalty parameter
        iterL::Int = 3,                       # number of CG iteration steps for S
        iterS::Int = iterL,                   # number of CG iteration steps for L
        N::Int = 10,                          # number of iterations
        verbose::Bool = false)                # print rank and loss value in each iteration
    
    complexType = eltype(d)
    floatType = real(complexType)
    
    scale_L, scale_S, Œª_L, Œª_S, Œ¥‚ÇÅ, Œ¥‚ÇÇ = convert(floatType, scale_L), convert(floatType, scale_S),
        convert(floatType, Œª_L), convert(floatType, Œª_S), convert(floatType, Œ¥‚ÇÅ), convert(floatType, Œ¥‚ÇÇ)
    
    #Initialize
    @assert 3 ‚â§ length(img_shape) ‚â§ 4
    if length(img_shape) == 3
        nx,ny,nt = img_shape
        nc = size(d)[end]
    else
        nx,ny,nt,nc = img_shape
    end
    d = reshape(d, :, nt, nc)
    E = reshape(E, inDims = (nx*nx, nt), outDims = size(d))
    X·¥≥·µÄ = reshape(X·¥≥·µÄ, nx*nx, nt)
    x‚ÇÄ = E' * d # initial guess
    
    L, S = copy(x‚ÇÄ), zeros(complexType, size(x‚ÇÄ))
    V‚ÇÅ, V‚ÇÇ = zeros(complexType, size(L)), zeros(complexType, size(L))
    
    SVT! = getSVT()
    
    cg_tol = convert(floatType, 1e-5)
    P, Q = similar(L), similar(L)
    temp‚ÇÅ, temp‚ÇÇ = similar(L), similar(L)
    
    cost_vec = OffsetVector{floatType}(undef, 0:N)
    rank_vec = OffsetVector{Int}(undef, 0:N)
    time_vec = OffsetVector{floatType}(undef, 0:N)
    time_vec[0] = 0
    cost_vec[0] = norm(temp‚ÇÅ .= X·¥≥·µÄ .- L .- S)
    rank_vec[0] = sum(Int, svdvals!(temp‚ÇÅ .= L) .> rank_rtol)
    verbose && iterationPrint("k" => 0, "rank(X·µè)" => rank_vec[0],
            "‚ÄñX·¥≥·µÄ - X·µè‚Äñ‚ÇÇ" => cost_vec[0])
    
    E·¥¥E_op, T·¥¥ = E'*E, T'
    cg_op‚ÇÅ, cg_op‚ÇÇ = E·¥¥E_op + Œ¥‚ÇÅ*I, E·¥¥E_op + Œ¥‚ÇÇ*I
    CGstate = CGStateVariables(temp‚ÇÇ, similar(L), similar(L))
    
    interval = verbose ? Inf : 1
    @showprogress interval "AL-CG " for k in 1:N
        
        time_vec[k] = time_vec[k-1] + @elapsed begin
        
            P = SVT!(P .= L .+ V‚ÇÅ, scale_L * Œª_L / Œ¥‚ÇÅ)
            Q = Œõ!(mul!(Q, T, S) .+= V‚ÇÇ, scale_S * Œª_S / Œ¥‚ÇÇ)

            temp‚ÇÅ .= x‚ÇÄ .- mul!(temp‚ÇÅ, E·¥¥E_op, S) .+ Œ¥‚ÇÅ.*(temp‚ÇÇ .= P .- V‚ÇÅ)
            cg!(L, cg_op‚ÇÅ, temp‚ÇÅ, tol=cg_tol, maxiter=iterL, statevars=CGstate)

            mul!(temp‚ÇÇ, T·¥¥, temp‚ÇÅ .= Q .- V‚ÇÇ)
            temp‚ÇÅ .= x‚ÇÄ .- mul!(temp‚ÇÅ, E·¥¥E_op, L) .+ Œ¥‚ÇÇ.*temp‚ÇÇ
            cg!(S, cg_op‚ÇÇ, temp‚ÇÅ, tol=cg_tol, maxiter=iterS, statevars=CGstate)

            V‚ÇÅ .+= L .- P
            V‚ÇÇ .+= mul!(temp‚ÇÅ, T, S) .- Q

        end
        
        cost_vec[k] = norm(temp‚ÇÅ .= X·¥≥·µÄ .- L .- S)
        rank_vec[k] = sum(Int, svdvals!(temp‚ÇÅ .= L) .> rank_rtol)
        verbose && iterationPrint("k" => k, "rank(X·µè)" => rank_vec[k],
                "‚ÄñX·¥≥·µÄ - X·µè‚Äñ‚ÇÇ" => cost_vec[k])
        
    end
    
    reshape(L, nx, ny, nt) + reshape(S, nx, ny, nt), rank_vec, cost_vec, time_vec
end

function AL_2(
        X·¥≥·µÄ::AbstractArray,                   # ground truth for MSE evaluation
        d::AbstractArray,                     # under-sampled k-t data
        Œ©::FunctionOperator,                  # under-sampling mask
        Q::FunctionOperator,                  # Fourier encoding operator
        C::FunctionOperator,                  # coil sensitivity maps
        T::FunctionOperator;                  # temporal Fourier tranform
        img_shape::NTuple = size(d),          # size of output image
        scale_L::Real = 1,                    # scaling factor for L
        scale_S::Real = 1,                    # scaling factor for S
        Œª_L::Real = 0.01,                     # singular value threshold
        Œª_S::Real = 0.05,                     # sparsity threshold
        Œ¥‚ÇÅ::Real = 1//10,                     # first AL penalty parameter
        Œ¥‚ÇÇ::Real = 1//100,                    # second AL penalty parameter
        N::Int = 10,                          # number of iterations
        verbose::Bool = false)                # print rank and loss value in each iteration
    
    complexType = eltype(d)
    floatType = real(complexType)
    
    scale_L, scale_S, Œª_L, Œª_S, Œ¥‚ÇÅ, Œ¥‚ÇÇ = convert(floatType, scale_L), convert(floatType, scale_S),
        convert(floatType, Œª_L), convert(floatType, Œª_S), convert(floatType, Œ¥‚ÇÅ), convert(floatType, Œ¥‚ÇÇ)
    
    #Initialize
    @assert 3 ‚â§ length(img_shape) ‚â§ 4
    if length(img_shape) == 3
        nx,ny,nt = img_shape
        nc = size(d)[end]
    else
        nx,ny,nt,nc = img_shape
    end
    E = reshape(Œ© * Q * C, inDims = (nx*nx, nt), outDims = size(d))
    QC = reshape(Q * C, inDims = (nx*nx, nt), outDims = size(d))
    X·¥≥·µÄ = reshape(X·¥≥·µÄ, nx*nx, nt)
    T·¥¥, QC·¥¥ = T', QC'
    
    L = reshape(E' * d, nx*ny, nt) # initial guess
    S = zeros(complexType, size(L))
    X = L + S
    V‚ÇÅ = zeros(complexType, size(d))
    V‚ÇÇ = zeros(complexType, size(L))
    Z_scaler = repeat(1 ./ (samp .+ Œ¥‚ÇÅ), 1, 1, 1, nc) # equivalent to (Œ©'*Œ© + Œ¥‚ÇÅ*I)'
    temp‚ÇÅ, temp‚ÇÇ, Z, temp‚ÇÉ, temp‚ÇÑ = similar(L), similar(L), similar(d), similar(d), similar(d)
    
    SVT! = getSVT()
    
    cost_vec = OffsetVector{floatType}(undef, 0:N)
    rank_vec = OffsetVector{Int}(undef, 0:N)
    time_vec = OffsetVector{floatType}(undef, 0:N)
    time_vec[0] = 0
    cost_vec[0] = norm(temp‚ÇÅ .= X·¥≥·µÄ .- L .- S)
    rank_vec[0] = sum(Int, svdvals!(temp‚ÇÅ .= L) .> rank_rtol)
    verbose && iterationPrint("k" => 0, "rank(X·µè)" => rank_vec[0],
            "‚ÄñX·¥≥·µÄ - X·µè‚Äñ‚ÇÇ" => cost_vec[0])
    
    # Iteration
    interval = verbose ? Inf : 1
    @showprogress interval "AL-2 " for k in 1:N
        
        time_vec[k] = time_vec[k-1] + @elapsed begin
        
            temp‚ÇÉ .= d #mul!(temp‚ÇÉ, Œ©', d)
            mul!(temp‚ÇÑ, QC, X)
            Z .= Z_scaler .* (temp‚ÇÉ .+ Œ¥‚ÇÅ .* (temp‚ÇÑ .- V‚ÇÅ))

            mul!(temp‚ÇÅ, QC·¥¥, temp‚ÇÉ .= Z .+ V‚ÇÅ)
            temp‚ÇÇ .= L .+ S .- V‚ÇÇ
            X .= Œ¥‚ÇÅ./(Œ¥‚ÇÅ .+ Œ¥‚ÇÇ).*temp‚ÇÅ .+ Œ¥‚ÇÇ./(Œ¥‚ÇÅ .+ Œ¥‚ÇÇ).*temp‚ÇÇ

            L = SVT!(L .= X .- S .+ V‚ÇÇ, scale_L * Œª_L / Œ¥‚ÇÇ)

            mul!(temp‚ÇÅ, T, temp‚ÇÅ .= X .- L .+ V‚ÇÇ)
            mul!(S, T·¥¥, Œõ!(temp‚ÇÅ, scale_S * Œª_S / Œ¥‚ÇÇ))

            mul!(temp‚ÇÉ, QC, X)
            V‚ÇÅ .+= Z .- temp‚ÇÉ

            V‚ÇÇ .+= X .- L .- S
            
        end
        
        cost_vec[k] = norm(temp‚ÇÅ .= X·¥≥·µÄ .- L .- S)
        rank_vec[k] = sum(Int, svdvals!(temp‚ÇÅ .= L) .> rank_rtol)
        verbose && iterationPrint("k" => k, "rank(X·µè)" => rank_vec[k],
                "‚ÄñX·¥≥·µÄ - X·µè‚Äñ‚ÇÇ" => cost_vec[k])
    end
    
    reshape(L, nx, ny, nt) + reshape(S, nx, ny, nt), rank_vec, cost_vec, time_vec
end

function createXLS(dType, row_dim, nt)
    X = zeros(dType, row_dim, 2*nt)
    L = view(X, :, 1:nt)
    S = view(X, :, nt + 1:2*nt)
    return X,L,S
end
function allocate(dType, row_dim, nt)
    createXLS(dType, row_dim, nt)..., createXLS(dType, row_dim, nt)...
end

function PGM(
        X·¥≥·µÄ::AbstractArray,                 # ground truth for MSE evaluation
        d::AbstractArray,                   # under-sampled k-t data
        E::FunctionOperator,                # acquisition operator
        T::FunctionOperator;                # sparsifying operator
        img_shape::NTuple = size(d),        # size of output image
        scale_L::Real = 1,                  # scaling factor for L
        scale_S::Real = 1,                  # scaling factor for S
        tscale::Real = 1,                   # scaling factor for t
        Œª_L::Real = 0.01,                   # singular value threshold
        Œª_S::Real = 0.05,                   # sparsity threshold
        N::Int = 10,                        # number of iterations
        restart::Bool = true,               # reset Œ∏‚Çñ if cost increased
        momentum::Symbol = :pogm,           # update rule (:pogm, :ista, :fista)
        verbose::Bool = false)              # print rank and loss value in each iteration
    
    complexType = eltype(d)
    floatType = real(complexType)
    
    scale_L, scale_S, tscale, Œª_L, Œª_S = convert(floatType, scale_L), convert(floatType, scale_S),
        convert(floatType, tscale), convert(floatType, Œª_L), convert(floatType, Œª_S)
    
    #Initialize
    @assert 3 ‚â§ length(img_shape) ‚â§ 4
    if length(img_shape) == 3
        nx,ny,nt = img_shape
        nc = size(d)[end]
    else
        nx,ny,nt,nc = img_shape
    end
    row_dim = nx*ny
    d = reshape(d, :, nt, nc)
    E = reshape(E, inDims = (row_dim, nt), outDims = size(d))
    X·¥≥·µÄ = reshape(X·¥≥·µÄ, nx*nx, nt)
    x‚ÇÄ = E' * d # initial guess
    
    X‚Çñ‚Çã‚ÇÅ,L‚Çñ‚Çã‚ÇÅ,S‚Çñ‚Çã‚ÇÅ,X‚Çñ,L‚Çñ,S‚Çñ = allocate(complexType, row_dim, nt)
    XÃÉ‚Çñ‚Çã‚ÇÅ,LÃÉ‚Çñ‚Çã‚ÇÅ,SÃÉ‚Çñ‚Çã‚ÇÅ,XÃÉ‚Çñ,LÃÉ‚Çñ,SÃÉ‚Çñ = allocate(complexType, row_dim, nt)
    if momentum == :pogm
        XÃÑ‚Çñ‚Çã‚ÇÅ,LÃÑ‚Çñ‚Çã‚ÇÅ,SÃÑ‚Çñ‚Çã‚ÇÅ,XÃÑ‚Çñ,LÃÑ‚Çñ,SÃÑ‚Çñ = allocate(complexType, row_dim, nt)
    else
        XÃÑ‚Çñ‚Çã‚ÇÅ,LÃÑ‚Çñ‚Çã‚ÇÅ,SÃÑ‚Çñ‚Çã‚ÇÅ,XÃÑ‚Çñ,LÃÑ‚Çñ,SÃÑ‚Çñ = XÃÉ‚Çñ‚Çã‚ÇÅ,LÃÉ‚Çñ‚Çã‚ÇÅ,SÃÉ‚Çñ‚Çã‚ÇÅ,XÃÉ‚Çñ,LÃÉ‚Çñ,SÃÉ‚Çñ
    end
    L‚Çñ‚Çã‚ÇÅ .= x‚ÇÄ
    XÃÑ‚Çñ‚Çã‚ÇÅ .= XÃÉ‚Çñ‚Çã‚ÇÅ .= X‚Çñ‚Çã‚ÇÅ
    temp‚ÇÅ, temp‚ÇÇ = similar(L‚Çñ‚Çã‚ÇÅ), similar(d)
    E·¥¥, T·¥¥ = E', T'
    
    t = (in(momentum, (:fista, :pogm)) ? 5//10 : 99//100) * tscale
    
    mul!(temp‚ÇÇ, E, x‚ÇÄ)
    mul!(temp‚ÇÅ, E', temp‚ÇÇ .-= d)
    M‚Çñ = M‚Çñ‚Çã‚ÇÅ = x‚ÇÄ .- t .* temp‚ÇÅ # we don't need two arrays for M, but it looks better this way
    
    Œ∏‚Çñ‚Çã‚ÇÅ = Œ∂‚Çñ‚Çã‚ÇÅ = 1.
    
    SVT! = getSVT()
    
    cost_vec = OffsetVector{floatType}(undef, 0:N)
    rank_vec = OffsetVector{Int}(undef, 0:N)
    time_vec = OffsetVector{floatType}(undef, 0:N)
    time_vec[0] = 0
    cost_vec[0] = norm(temp‚ÇÅ .= X·¥≥·µÄ .- L‚Çñ‚Çã‚ÇÅ .- S‚Çñ‚Çã‚ÇÅ)
    rank_vec[0] = sum(Int, svdvals!(temp‚ÇÅ .= L‚Çñ‚Çã‚ÇÅ) .> rank_rtol)
    verbose && iterationPrint("k" => 0, "rank(X·µè)" => rank_vec[0],
            "‚ÄñX·¥≥·µÄ - X·µè‚Äñ‚ÇÇ" => cost_vec[0])
    
    # Iteration
    title = momentum == :ista ? "ISTA " : (momentum == :fista ? "FISTA " : "POGM ")
    interval = verbose ? Inf : 1
    @showprogress interval title for k in 1:N
        
        time_vec[k] = time_vec[k-1] + @elapsed begin
            
            @. LÃÉ‚Çñ = M‚Çñ‚Çã‚ÇÅ - S‚Çñ‚Çã‚ÇÅ
            @. SÃÉ‚Çñ = M‚Çñ‚Çã‚ÇÅ - L‚Çñ‚Çã‚ÇÅ

            Œ∏‚Çñ  = (1 + ‚àö(1 + (k < N ? 4 : 8)*Œ∏‚Çñ‚Çã‚ÇÅ^2))/2

            if momentum == :pogm
                @. XÃÑ‚Çñ = XÃÉ‚Çñ + (Œ∏‚Çñ‚Çã‚ÇÅ-1)/Œ∏‚Çñ*(XÃÉ‚Çñ - XÃÉ‚Çñ‚Çã‚ÇÅ) +
                    (Œ∏‚Çñ‚Çã‚ÇÅ)/Œ∏‚Çñ*(XÃÉ‚Çñ - X‚Çñ‚Çã‚ÇÅ) + (Œ∏‚Çñ‚Çã‚ÇÅ-1)/(Œ∂‚Çñ‚Çã‚ÇÅ*Œ∏‚Çñ)*t*(XÃÑ‚Çñ‚Çã‚ÇÅ - X‚Çñ‚Çã‚ÇÅ)
            elseif momentum == :fista
                @. XÃÑ‚Çñ = XÃÉ‚Çñ + (Œ∏‚Çñ‚Çã‚ÇÅ-1)/Œ∏‚Çñ*(XÃÉ‚Çñ - XÃÉ‚Çñ‚Çã‚ÇÅ)
            else
                # nothing to do as XÃÑ‚Çñ == XÃÉ‚Çñ
            end

            Œ∂‚Çñ  = t*(1 + (Œ∏‚Çñ‚Çã‚ÇÅ-1)/Œ∏‚Çñ + (Œ∏‚Çñ‚Çã‚ÇÅ)/Œ∏‚Çñ)

            SVT!(L‚Çñ .= LÃÑ‚Çñ, scale_L*Œª_L)

            mul!(temp‚ÇÅ, T, temp‚ÇÅ .= SÃÑ‚Çñ) # T operator in doesn't like subarrays
            mul!(temp‚ÇÅ, T·¥¥, Œõ!(temp‚ÇÅ, scale_S*Œª_S))
            S‚Çñ .= temp‚ÇÅ

            mul!(temp‚ÇÇ, E, temp‚ÇÅ .= L‚Çñ .+ S‚Çñ)
            mul!(temp‚ÇÅ, E·¥¥, temp‚ÇÇ .-= d)
            @. M‚Çñ = L‚Çñ + S‚Çñ - t * temp‚ÇÅ
        
        end
        
        cost_vec[k] = norm(temp‚ÇÅ .= X·¥≥·µÄ .- L‚Çñ .- S‚Çñ)
        rank_vec[k] = sum(Int, svdvals!(temp‚ÇÅ .= L‚Çñ) .> rank_rtol)
        verbose && iterationPrint("k" => k, "rank(X·µè)" => rank_vec[k],
                "‚ÄñX·¥≥·µÄ - X·µè‚Äñ‚ÇÇ" => cost_vec[k])
        
        # Move (k) -> (k-1), and avoid allocation for new (k)
        #      => switch (k) and (k-1) matrices
        @swap(X‚Çñ‚Çã‚ÇÅ, X‚Çñ); @swap(XÃÉ‚Çñ‚Çã‚ÇÅ, XÃÉ‚Çñ); @swap(XÃÑ‚Çñ‚Çã‚ÇÅ, XÃÑ‚Çñ)
        @swap(L‚Çñ‚Çã‚ÇÅ, L‚Çñ); @swap(LÃÉ‚Çñ‚Çã‚ÇÅ, LÃÉ‚Çñ); @swap(LÃÑ‚Çñ‚Çã‚ÇÅ, LÃÑ‚Çñ)
        @swap(S‚Çñ‚Çã‚ÇÅ, S‚Çñ); @swap(SÃÉ‚Çñ‚Çã‚ÇÅ, SÃÉ‚Çñ); @swap(SÃÑ‚Çñ‚Çã‚ÇÅ, SÃÑ‚Çñ)
        @swap(M‚Çñ‚Çã‚ÇÅ, M‚Çñ)
        Œ∏‚Çñ‚Çã‚ÇÅ, Œ∂‚Çñ‚Çã‚ÇÅ = Œ∏‚Çñ, Œ∂‚Çñ
    end
    
    reshape(L‚Çñ, nx, ny, nt) + reshape(S‚Çñ, nx, ny, nt), rank_vec, cost_vec, time_vec
end

pos(x) = x < 0 ? zero(x) : x
Œõ! = (v,p) -> @. v = sign(v) * pos(abs(v) - p)

function getSVT()
    F = nothing
    (A,p) -> begin
        F isa Nothing ? (F = svd!(A)) : svd!(A, F)
        mul!(A, F.U, mul!(F.Vt, Diagonal(Œõ!(F.S, p)), F.Vt))
    end
end

norm‚Çô!(A) = sum(svdvals!(A))

import Base.size
function Base.size(FO::FunctionOperator, d::Int)
    @assert d in [1, 2]
    prod(d == 1 ? FO.outDims : FO.inDims)
end

format(value) = value isa Real && !(value isa Int) ? @sprintf("%.3f", value) : string(value)

iterationPrint(pairs...) =
    println(join([key*" = "*format(value) for (key,value) in pairs], ",\t"))


